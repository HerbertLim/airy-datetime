{"version":3,"sources":["../../src/test/dateToUserFriendly.test.js"],"names":["dateTimeStr","dateTimeStr2","now","Date","now2","describe","it","assert","equal","toString","lang","timezone","type","gmtOffset","isPublished"],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {dateToUserFriendly} from '../lib/dateFormat';\n\nconst dateTimeStr = '2019-12-17 18:35:47';\nconst dateTimeStr2 = '2020-01-01 0:35:47';\nconst now = new Date(dateTimeStr)\nconst now2 = new Date(dateTimeStr2)\n\ndescribe('dateToUserFriendly 파라미터 오류 체크', () => {\n    it(`${dateTimeStr}의 파리미터 없으면 null 이다 `, () => {\n        assert.equal(dateToUserFriendly(), null)\n    })\n    it(`${dateTimeStr}의 jsDate 아닌 파라미터이면 null 이다 `, () => {\n        assert.equal(dateToUserFriendly(now.toString(), 'A1'), null)\n    })\n    it(`${dateTimeStr}의 format 파라미터 없으면 null 이다 `, () => {\n        assert.equal(dateToUserFriendly(now), null)\n    })\n    it(`${dateTimeStr}의 format 파라미터 길이가 2가 아니면 null 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A33'), null)\n    })\n    it(`${dateTimeStr}의 format 파라미터 유효하지 않으면 null 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A8'), null)\n    })\n})\n\ndescribe('dateToUserFriendly A1: Month, Date, Day, HH:00', () => {\n    it(`${dateTimeStr}의 format A1 결과는 '12/17(화) 18:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A1'), '12/17(화) 18:00')\n    })\n    it(`${dateTimeStr2}의 format A1 결과는 '1/1(수) 00:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A1'), '1/1(수) 00:00')\n    })\n    it(`${dateTimeStr}의 format A1, 'fr' 결과는 'Dec 17 Tue 18:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A1', {lang: 'fr'}), 'Dec 17 Tue 18:00')\n    })\n    it(`${dateTimeStr}의 format A1, timezone: 'device' 결과는 '12/17(화) 18:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A1', {timezone: {type: 'device'}}), '12/17(화) 18:00')\n    })\n    it(`${dateTimeStr}의 format A1, timezone: 'utc' 결과는 '12/17(화) 09:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A1', {timezone: {type: 'utc'}}), '12/17(화) 09:00')\n    })\n    it(`${dateTimeStr}의 format A1, timezone: 중국 결과는 '12/17(화) 17:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A1', {timezone: {type: 'gmtOffset', gmtOffset: 480}}), '12/17(화) 17:00')\n    })\n    it(`${dateTimeStr}의 format A1, timezone: 뉴욕 -300 결과는 '12/17(화) 04:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A1', {timezone: {type: 'gmtOffset', gmtOffset: -300}}), '12/17(화) 04:00')\n    })\n    it(`${dateTimeStr2}의 format A1, 'en', timezone: 뉴욕 -300 결과는 'Dec 31 Tue 10:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A1', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}}), 'Dec 31 Tue 10:00')\n    })\n})\n\ndescribe('dateToUserFriendly A2 Month, Date, Day, HH:MM', () => {\n    it(`${dateTimeStr}의 format A2 결과는 '12/17(화) 18:35' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A2'), '12/17(화) 18:35')\n    })\n    it(`${dateTimeStr}의 format A2, lang:'jp' 결과는 'Dec 17 Tue 18:35' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A2', {lang: 'jp'}), 'Dec 17 Tue 18:35')\n    })\n    it(`${dateTimeStr}의 format A2, timezone: 'utc' 결과는 '12/17(화) 09:35' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A2', {timezone: {type: 'utc'}}), '12/17(화) 09:35')\n    })\n    it(`${dateTimeStr}의 format A2, timezone: 중국 결과는 '12/17(화) 17:35' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A2', {timezone: {type: 'gmtOffset', gmtOffset: 480}}), '12/17(화) 17:35')\n    })\n    it(`${dateTimeStr}의 format A2, lang:'en', timezone: 뉴욕 -300 결과는 'Dec 17 Tue 04:35' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A2', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}}), 'Dec 17 Tue 04:35')\n    })\n})\n\ndescribe('dateToUserFriendly A3: Month, Date, Day, HH', () => {\n    it(`${dateTimeStr}의 format A3 결과는 '12/17(화) 18시' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A3'), '12/17(화) 18시')\n    })\n    it(`${dateTimeStr}의 format A3, 'au' 결과는 'Dec 17 Tue 18H' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A3', {lang: 'au'}), 'Dec 17 Tue 18H')\n    })\n\n    it(`${dateTimeStr}의 format A3, timezone: 'utc' 결과는 '12/17(화) 9시' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A3', {timezone: {type: 'utc'}}), '12/17(화) 9시')\n    })\n    it(`${dateTimeStr}의 format A3, timezone: 중국 결과는 '12/17(화) 17시' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A3', {timezone: {type: 'gmtOffset', gmtOffset: 480}}), '12/17(화) 17시')\n    })\n    it(`${dateTimeStr}의 format A3, lang:'en', timezone: 뉴욕 -300 결과는 'Dec 17 Tue 4H' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A3', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}}), 'Dec 17 Tue 4H')\n    })\n})\n\ndescribe(`dateToUserFriendly A4: For HCS. Both Published/Measured. Date: ${dateTimeStr}`, () => {\n    it(`${dateTimeStr}의 format A4 결과는 '12/17(화) 18시 발표 (17시 평균)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A4'), '12/17(화) 18시 발표 (17시 평균)')\n    })\n    it(`${dateTimeStr}의 format A4, en의 결과는 'Published: 2019-12-17 Tue 18:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A4', {lang: 'en'}), 'Published: 2019-12-17 Tue 18:00')\n    })\n    it(`${dateTimeStr}의 format A4, timezone: 'utc' 결과는 '12/17(화) 9시 발표 (8시 평균)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A4', {timezone: {type: 'utc'}}), '12/17(화) 9시 발표 (8시 평균)')\n    })\n    it(`${dateTimeStr}의 format A4, timezone: 중국 결과는 '12/17(화) 17시 발표 (16시 평균)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A4', {timezone: {type: 'gmtOffset', gmtOffset: 480}}), '12/17(화) 17시 발표 (16시 평균)')\n    })\n    it(`${dateTimeStr}의 format A4, lang:'en', timezone: 뉴욕 -300 결과는 'Published: 2019-12-17 Tue 04:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A4', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}}), 'Published: 2019-12-17 Tue 04:00')\n    })\n    it(`${dateTimeStr}의 format A4, 'en', isPublished: false, timezone: 뉴욕 -300 결과는 'Average: 2019-12-17 Tue 03:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now, 'A4', \n            {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: false}), \n            'Average: 2019-12-17 Tue 04:00')\n    })\n})\n\ndescribe(`dateToUserFriendly A4: For HCS. Both Published/Measured. Date: ${dateTimeStr2}`, () => {\n    it(`${dateTimeStr2}의 format A4 결과는 '1/1(수) 0시 발표 (23시 평균)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A4'), '1/1(수) 0시 발표 (23시 평균)')\n    })\n    it(`${dateTimeStr2}의 format A4, en의 결과는 'Published: 2020-01-01 Wed 00:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A4', {lang: 'en'}), 'Published: 2020-01-01 Wed 00:00')\n    })\n    it(`${dateTimeStr2}의 format A4, timezone: 'utc' 결과는 '12/31(화) 15시 발표 (14시 평균)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A4', {timezone: {type: 'utc'}}), '12/31(화) 15시 발표 (14시 평균)')\n    })\n    it(`${dateTimeStr2}의 format A4, timezone: 중국 결과는 '12/31(화) 23시 발표 (22시 평균)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A4', {timezone: {type: 'gmtOffset', gmtOffset: 480}}), '12/31(화) 23시 발표 (22시 평균)')\n    })\n    it(`${dateTimeStr2}의 format A4, lang:'en', timezone: 뉴욕 -300 결과는 'Published: 2019-12-31 Tue 10:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A4', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}}), 'Published: 2019-12-31 Tue 10:00')\n    })\n    it(`${dateTimeStr2}의 format A4, 'en', isPublished: false, timezone: 뉴욕 -300 결과는 'Average: 2019-12-31 Tue 10:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'A4', \n            {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: false}), \n            'Average: 2019-12-31 Tue 10:00')\n    })\n})\n\ndescribe('dateToUserFriendly B1: Year, Month, Date, Day, Hour', () => {\n    it(`${dateTimeStr}의 format B1 결과는 '2019년 12/17(화) 18:00' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'B1'), '2019년 12/17(화) 18:00')\n    })\n    it(`${dateTimeStr}의 format B1, 'fr' 결과는 '2019-12-17 Tue 18:00' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'B1', {lang: 'fr'}), '2019-12-17 Tue 18:00')\n    })\n    it(`${dateTimeStr2}의 format B1, timezone: 'utc' 결과는 '2019년 12/31(화) 15:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B1', {timezone: {type: 'utc'}}), '2019년 12/31(화) 15:00')\n    })\n    it(`${dateTimeStr2}의 format B1, timezone: 중국 결과는 '2019년 12/31(화) 23:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B1', {timezone: {type: 'gmtOffset', gmtOffset: 480}}), '2019년 12/31(화) 23:00')\n    })\n    it(`${dateTimeStr2}의 format B1, 'en', isPublished: false, timezone: 뉴욕 -300 결과는 '2019-12-31 Tue 10:00' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B1', \n            {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: false}), \n            '2019-12-31 Tue 10:00')\n    })\n})\n\ndescribe('dateToUserFriendly B2: Year, Month, Date, Day', () => {\n    it(`${dateTimeStr}의 format B2 결과는 '2019년 12/17(화)' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'B2'), '2019년 12/17(화)')\n    })\n    it(`${dateTimeStr}의 format B2, 'en' 결과는 '2019-12-17 Tue' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'B2', {lang: 'en'}), '2019-12-17 Tue')\n    })\n    it(`${dateTimeStr2}의 format B2, timezone: 'utc' 결과는 '2019년 12/31(화)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B2', {timezone: {type: 'utc'}}), '2019년 12/31(화)')\n    })\n    it(`${dateTimeStr2}의 format B2, timezone: 중국 결과는 '2019년 12/31(화)' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B2', {timezone: {type: 'gmtOffset', gmtOffset: 480}}), '2019년 12/31(화)')\n    })\n    it(`${dateTimeStr2}의 format B2, 'en', isPublished: false, timezone: 뉴욕 -300 결과는 '2019-12-31 Tue' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B2', \n            {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: false}), \n            '2019-12-31 Tue')\n    })\n})\n\ndescribe('dateToUserFriendly B3: Published/Measured Date time', () => {\n    it(`${dateTimeStr}의 format B3 결과는 '2019년 12/17(화) 18시 발표' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'B3'), '2019년 12/17(화) 18시 발표')\n    })\n    it(`${dateTimeStr}의 format B3, 'en' 결과는 'Published: 2019-12-17 Tue 18:00' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'B3', {lang: 'en'}), 'Published: 2019-12-17 Tue 18:00')\n    })\n    it(`${dateTimeStr2}의 format B3, isPublished: true, timezone: 'utc' 결과는 '2019년 12/31(화) 15시 발표' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B3', {timezone: {type: 'utc'}, isPublished: true}), \n            '2019년 12/31(화) 15시 발표')\n    })\n    it(`${dateTimeStr2}의 format B3, isPublished: false, timezone: 'utc' 결과는 '2019년 12/31(화) 14시 평균' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B3', {timezone: {type: 'utc'}, isPublished: false}), \n            '2019년 12/31(화) 14시 평균')\n    })\n    it(`${dateTimeStr2}의 format B3, timezone: 중국 결과는 'Published: 2019-12-31 Tue 23:00' 이다 `, () => {\n        assert.equal(\n            dateToUserFriendly(now2, 'B3', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: 480}}), \n            'Published: 2019-12-31 Tue 23:00'\n        )\n    })\n    it(`${dateTimeStr2}의 format B3, en, timezone: 중국 결과는 'Average: 2019-12-31 Tue 23H' 이다 `, () => {\n        assert.equal(\n            dateToUserFriendly(now2, 'B3', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: 480}, isPublished: false}), \n            'Average: 2019-12-31 Tue 22H'\n        )\n    })\n    it(`${dateTimeStr2}의 format B3, 'ko', isPublished: false, timezone: 뉴욕 -300 결과는 '2019년 12/31(화) 9시 평균' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B3', \n            {lang: 'ko', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: false}), \n            '2019년 12/31(화) 9시 평균')\n    })\n    it(`${dateTimeStr2}의 format B3, 'en', isPublished: false, timezone: 뉴욕 -300 결과는 'Average: 2019-12-31 Tue 09H' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B3', \n            {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: false}), \n            'Average: 2019-12-31 Tue 09H')\n    })\n})\n\ndescribe('dateToUserFriendly B4: Published/Measured Date time', () => {\n    it(`${dateTimeStr2}의 format B4, timezone: 중국 결과는 'Published: 2019-12-31 Tue 23:00' 이다 `, () => {\n        assert.equal(\n            dateToUserFriendly(now2, 'B4', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: 480}}), \n            'Published: 2019-12-31 Tue 23:00'\n        )\n    })\n    it(`${dateTimeStr2}의 format B4, en, timezone: 중국 결과는 'Average: 2019-12-31 Tue 22:00~59' 이다 `, () => {\n        assert.equal(\n            dateToUserFriendly(now2, 'B4', {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: 480}, isPublished: false}), \n            'Average: 2019-12-31 Tue 22:00~59'\n        )\n    })\n    it(`${dateTimeStr2}의 format B4, 'ko', isPublished: true, timezone: 뉴욕 -300 결과는 '2019년 12/31(화) 10시 발표' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B4', \n            {lang: 'ko', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: true}), \n            '2019년 12/31(화) 10시 발표')\n    })\n    it(`${dateTimeStr2}의 format B4, 'en', isPublished: false, timezone: 뉴욕 -300 결과는 'Average: 2019-12-31 Tue 09:00~59' 이다 `, () => {\n        assert.equal(dateToUserFriendly(now2, 'B4', \n            {lang: 'en', timezone: {type: 'gmtOffset', gmtOffset: -300}, isPublished: false}), \n            'Average: 2019-12-31 Tue 09:00~59')\n    })\n})\n\ndescribe('dateToUserFriendly C1: Only Hour. hh:00', () => {\n    it(`${dateTimeStr}의 format C1 결과는 '18:00' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'C1'), '18:00')\n    })\n    it(`${dateTimeStr}의 format C1, 'en' 결과는 '18:00' 이다`, () => {\n        assert.equal(dateToUserFriendly(now, 'C1', {lang: 'en'}), '18:00')\n    })\n})"],"file":"dateToUserFriendly.test.js"}