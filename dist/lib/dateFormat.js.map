{"version":3,"sources":["../../src/lib/dateFormat.js"],"names":["krDays","enDays","validFormats","dateToUserFriendly","jsDate","format","option","defaultOption","lang","timezone","type","isPublished","finalOption","_","isDate","length","includes","finalDate","currentGmtOffset","getTimezoneOffset","gmtOffset","relativeOffset","Date","getTime","finalDateStr","isKorean","fullYear","getFullYear","month","getMonth","month2","month3","Intl","DateTimeFormat","date","getDate","date2","day","getDay","hour","getHours","hour2","min","getMinutes","min2","monthDateDay","hourStr","toString","measuredDate","mHour","label","finalHour","enTail"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nconst krDays = ['일', '월', '화', '수', '목', '금', '토'];\nconst enDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst validFormats = ['A1', 'A2', 'A3', 'A4', 'B1', 'B2', 'B3', 'B4', 'C1'];\n\nexport function dateToUserFriendly(jsDate, format, option) {\n    const defaultOption = {lang:'ko', timezone:{type:'device'}, isPublished:true};\n    const finalOption = option ? {...defaultOption, ...option} : defaultOption;\n    const {lang, timezone, isPublished} = finalOption;\n\n    if (!jsDate || !_.isDate(jsDate) || !format || format.length != 2 || !validFormats.includes(format)) {\n        return null;\n    }\n\n    let finalDate;\n    if (timezone.type === 'device') {\n        finalDate = jsDate;\n    } else {\n        const currentGmtOffset = -jsDate.getTimezoneOffset()\n        const gmtOffset = timezone.type == 'utc' ? 0 : timezone.gmtOffset ? timezone.gmtOffset : currentGmtOffset;\n        const relativeOffset = gmtOffset - currentGmtOffset;\n        finalDate = new Date(jsDate.getTime() + 60*1000*relativeOffset)\n    }\n\n    let finalDateStr = '';\n    const isKorean = lang == 'ko';\n    const fullYear = finalDate.getFullYear()\n    const month = finalDate.getMonth() + 1;\n    const month2 = month < 10 ? '0' + month : month;\n    const month3 = new Intl.DateTimeFormat('en-US', {month: 'short'}).format(finalDate)\n    const date = finalDate.getDate()\n    const date2 = date < 10 ? '0' + date : date;\n    const day = isKorean ? krDays[finalDate.getDay()] : enDays[finalDate.getDay()];\n    const hour = finalDate.getHours()\n    const hour2 = hour < 10 ? '0' + hour : hour;\n    const min = finalDate.getMinutes()\n    const min2 = min < 10 ? '0' + min : min;\n\n    const monthDateDay = isKorean ? `${month}/${date}(${day})` : `${month3} ${date} ${day}`;\n\n    let hourStr = hour.toString() \n\n    //console.log(`isKorean:${isKorean}, lang=${lang}`)\n        \n\n    switch (format) {\n    case 'A1':\n        finalDateStr = monthDateDay + ' ' + hour2 + ':00'\n        break;\n    case 'A2':\n        finalDateStr = monthDateDay + ' ' + hour2 + ':' + min;\n        break;\n    case 'A3':\n        finalDateStr = monthDateDay + ' ' + hour + (isKorean? '시' : 'H')\n        break;\n    case 'A4':\n        const measuredDate = new Date(finalDate.getTime() - 1000*3600)\n        const mHour = measuredDate.getHours()\n        if (isKorean) {\n            finalDateStr = monthDateDay + ' ' +  hourStr + '시 발표 (' + mHour + '시 평균)';\n        } else {\n            finalDateStr = isPublished ? 'Published: ' : 'Average: ';\n            finalDateStr += fullYear + '-' + month2 + '-' + date2;\n            finalDateStr += ' ' + day + ' ' + hour2 + ':' + '00';\n        }\n        break;\n    case 'B1':\n        finalDateStr = isKorean ? \n                `${fullYear}년 ${month}/${date}(${day}) ${hour2}:00` :\n                `${fullYear}-${month2}-${date} ${day} ${hour2}:00`;\n        break;\n    case 'B2':\n        finalDateStr = isKorean ? \n                `${fullYear}년 ${monthDateDay}` :\n                `${fullYear}-${month2}-${date2} ${day}`;\n        break;\n    case 'B3':\n    case 'B4':\n        const label = isKorean ? (isPublished ? '발표' : '평균') : (isPublished ? 'Published' : 'Average')\n        let finalHour = isKorean ? hour : hour2;\n        if (isPublished) {\n            finalDateStr = isKorean ?\n                    `${fullYear}년 ${month}/${date}(${day}) ${finalHour}시 ${label}` :\n                    `${label}: ${fullYear}-${month2}-${date2} ${day} ${finalHour}:00`;\n        } else {\n            const measuredDate = new Date(finalDate.getTime() - 1000*3600)\n            const fullYear = measuredDate.getFullYear()\n            const month = measuredDate.getMonth() + 1;\n            const month2 = month < 10 ? '0' + month : month;\n            const date = measuredDate.getDate()\n            const date2 = date < 10 ? '0' + date : date;\n            const day = isKorean ? krDays[measuredDate.getDay()] : enDays[measuredDate.getDay()];\n            const hour = measuredDate.getHours()\n            const hour2 = hour < 10 ? '0' + hour : hour;\n            const enTail = isPublished ? ':00' : format == 'B3' ? 'H' : ':00~59';\n\n            finalDateStr = isKorean ?\n                    `${fullYear}년 ${month}/${date}(${day}) ${hour}시 ${label}` :\n                    `${label}: ${fullYear}-${month2}-${date2} ${day} ${hour2}${enTail}`;\n        }\n\n        break;\n        /*\n    case 'B4':\n        const label = isKorean ? (isPublished ? '발표' : '평균') : (isPublished ? 'Published' : 'Average')\n        let finalHour = isKorean ? hour : hour2;\n        if (isPublished) {\n            finalDateStr = isKorean ?\n                    `${fullYear}년 ${month}/${date}(${day}) ${finalHour}시 ${label}` :\n                    `${label}: ${fullYear}-${month2}-${date2} ${day} ${finalHour}:00`;\n        } else {\n            const measuredDate = new Date(finalDate.getTime() - 1000*3600)\n            const fullYear = measuredDate.getFullYear()\n            const month = measuredDate.getMonth() + 1;\n            const month2 = month < 10 ? '0' + month : month;\n            const date = measuredDate.getDate()\n            const date2 = date < 10 ? '0' + date : date;\n            const day = isKorean ? krDays[measuredDate.getDay()] : enDays[measuredDate.getDay()];\n            const hour = measuredDate.getHours()\n            const hour2 = hour < 10 ? '0' + hour : hour;\n            const enTail = isPublished ? ':00' : ':00~59';\n\n            finalDateStr = isKorean ?\n                    `${fullYear}년 ${month}/${date}(${day}) ${hour}시 ${label}` :\n                    `${label}: ${fullYear}-${month2}-${date2} ${day} ${hour2}${enTail}`;\n        }\n\n        break;\n        */\n    case 'C1': \n        finalDateStr = hourStr + ':00';\n        break;      \n    default:\n        return null;\n    }\n                \n    return finalDateStr;\n}\n\n/*\nmodule.exports = {\n    getEcoaTime,\n    getEcoaTime2,\n    toEcoaTime,\n    getKstLambdaDate,\n    dateToUserFriendly,\n    ecoaTimeToJsDate,\n}\n*/"],"file":"dateFormat.js"}